import { Context } from "telegraf";
import { UsersEntity } from '../../database/entities/Users.entity';
import { sendOrEditMessage } from "../../messages";

export const notification = async (ctx: Context, user: UsersEntity): Promise<void> => {
  user.NotificationStatus = !user.NotificationStatus;
  await user.save();


  const NotificationStatus = user.NotificationStatus ? "‚úÖ–í–∫–ª—é—á–µ–Ω—ã" : "‚ùå–í—ã–∫–ª—é—á–µ–Ω—ã";
  const MotivationText = user.NotificationStatus ? "" : "‚ö†–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.";

  await sendOrEditMessage(ctx, `–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${NotificationStatus}\n\n${MotivationText}`,{
    reply_markup: {
      inline_keyboard: [
        [ { text: "üö™–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ", callback_data: "/info"}],
        [ { text: "‚¨Ö–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "/start"} ]]
    }
  });
};

